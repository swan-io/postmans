{
	"info": {
		"_postman_id": "a54de382-438e-4403-a0c1-cca4b1f94c89",
		"name": "Swan Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Project Token",
			"item": [
				{
					"name": "Onboarding",
					"item": [
						{
							"name": "Generate individual onboarding URL",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: OnboardIndividualAccountHolderInput) {\n  onboardIndividualAccountHolder(\n    input: $input\n  ) \n  {\n    ... on OnboardIndividualAccountHolderSuccessPayload {\n      __typename\n      onboarding {\n        onboardingUrl\n        redirectUrl\n      }\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{ \n    \"input\": {\n        \"email\": \"test@mycompany.com\", \n            \"employmentStatus\": \"Employee\", \n            \"monthlyIncome\": \"LessThan500\", \n            \"residencyAddress\": {\n                \"addressLine1\": \"1 Rue de la Paix\", \n                \"city\": \"Paris\", \n                \"country\": \"FRA\", \n                \"postalCode\": \"75002\"\n            }\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						},
						{
							"name": "Update individual onboarding",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: UpdateIndividualOnboardingInput!) {\n  updateIndividualOnboarding(input: $input) {\n    ... on UpdateIndividualOnboardingSuccessPayload {\n      __typename\n      onboarding {\n        onboardingUrl\n        redirectUrl\n      }\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n  }\n  \n}\n",
										"variables": "{ \n    \"input\": {\n        \"onboardingId\":\"TO_FILL_WITH_ONBOARDING_ID\",\n        \"email\": \"test@mycompany.com\", \n            \"employmentStatus\": \"Employee\", \n            \"monthlyIncome\": \"LessThan500\", \n            \"residencyAddress\": {\n                \"addressLine1\": \"1 Rue de la Paix\", \n                \"city\": \"Paris\", \n                \"country\": \"FRA\", \n                \"postalCode\": \"75002\"\n            }\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						},
						{
							"name": "Generate company onboarding URL",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation(\n  $input: UpdateCompanyOnboardingInput!) {\n  updateCompanyOnboarding(input: $input) {\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n    ... on InternalErrorRejection {\n      __typename\n      message\n    }\n    ... on UpdateCompanyOnboardingSuccessPayload {\n      __typename\n      onboarding {\n        id\n        onboardingUrl\n      }\n    }\n    ... on ValidationRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{\n    \"input\": {\n      \"businessActivity\": \"Arts\", \n      \"businessActivityDescription\": \"I sell great art things\", \n      \"companyType\": \"Company\", \n      \"email\": \"myname@myartbusiness.com\", \n      \"isRegistered\": false, \n      \"language\": \"EN\", \n      \"monthlyPaymentVolume\": \"Between10000And50000\", \n      \"name\": \"My Art Business\", \n      \"redirectUrl\": \"{{CALLBACK_URL}}\", \n      \"registrationNumber\": \"123123\", \n      \"residencyAddress\": {\n        \"addressLine1\": \"1 rue de la Paix\", \n        \"city\": \"Paris\", \n        \"country\": \"FRA\", \n        \"postalCode\": \"75002\"\n      }, \n\"individualUltimateBeneficialOwners\": [\n        {\n          \"type\": \"HasCapital\",\n          \"birthCity\": \"New York\",\n          \"birthCityPostalCode\": \"10001\",\n          \"birthDate\": \"01/01/1980\",\n          \"direct\": true,\n          \"birthCountryCode\": \"USA\",\n          \"firstName\": \"John\",\n          \"lastName\": \"Doe\",\n          \"totalCapitalPercentage\": 50\n        },\n        {\n          \"type\": \"HasCapital\",\n          \"birthCity\": \"Paris\",\n          \"birthCityPostalCode\": \"75001\",\n          \"birthDate\": \"01/01/1990\",\n          \"birthCountryCode\": \"FRA\",\n          \"firstName\": \"Thomas\",\n          \"lastName\": \"Dupont\",\n          \"totalCapitalPercentage\": 50,\n          \"indirect\":true\n        }\n      ]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for a company and pre-load the form with the company’s data. We highly recommend filling in all fields, especially Ultimate Beneficial Owners. The example below shows a company with one direct physical owner, and one indirect physical person through a direct company."
							},
							"response": []
						},
						{
							"name": "Update company onboarding",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation(\n  $input: UpdateCompanyOnboardingInput!) {\n  updateCompanyOnboarding(input: $input) {\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n    ... on InternalErrorRejection {\n      __typename\n      message\n    }\n    ... on UpdateCompanyOnboardingSuccessPayload {\n      __typename\n      onboarding {\n        id\n        onboardingUrl\n      }\n    }\n    ... on ValidationRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{\n    \"input\": {\n        \"onboardingId\":\"TO_FILL_WITH_ONBOARDING_ID\",\n      \"businessActivity\": \"Arts\", \n      \"businessActivityDescription\": \"I sell great art things\", \n      \"companyType\": \"Company\", \n      \"email\": \"myname@myartbusiness.com\", \n      \"isRegistered\": false, \n      \"language\": \"EN\", \n      \"monthlyPaymentVolume\": \"Between10000And50000\", \n      \"name\": \"My Art Business\", \n      \"redirectUrl\": \"{{CALLBACK_URL}}\", \n      \"registrationNumber\": \"123123\", \n      \"residencyAddress\": {\n        \"addressLine1\": \"1 rue de la Paix\", \n        \"city\": \"Paris\", \n        \"country\": \"FRA\", \n        \"postalCode\": \"75002\"\n      }, \n\"individualUltimateBeneficialOwners\": [\n        {\n          \"type\": \"HasCapital\",\n          \"birthCity\": \"New York\",\n          \"birthCityPostalCode\": \"10001\",\n          \"birthDate\": \"01/01/1980\",\n          \"direct\": true,\n          \"birthCountryCode\": \"USA\",\n          \"firstName\": \"John\",\n          \"lastName\": \"Doe\",\n          \"totalCapitalPercentage\": 50\n        },\n        {\n          \"type\": \"HasCapital\",\n          \"birthCity\": \"Paris\",\n          \"birthCityPostalCode\": \"75001\",\n          \"birthDate\": \"01/01/1990\",\n          \"birthCountryCode\": \"FRA\",\n          \"firstName\": \"Thomas\",\n          \"lastName\": \"Dupont\",\n          \"totalCapitalPercentage\": 50,\n          \"indirect\":true\n        }\n      ]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for a company and pre-load the form with the company’s data. We highly recommend filling in all fields, especially Ultimate Beneficial Owners. The example below shows a company with one direct physical owner, and one indirect physical person through a direct company."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Holder",
					"item": [
						{
							"name": "Account Holder status",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query accounts {\n  onboardings {\n    edges {\n      node {\n        accountHolder {\n          statusInfo {\n            status\n            ... on AccountHolderCanceledStatusInfo {\n              __typename\n              reason\n              status\n            }\n            ... on AccountHolderEnabledStatusInfo {\n              __typename\n              status\n            }\n            ... on AccountHolderSuspendedStatusInfo {\n              __typename\n              reason\n              status\n            }\n          }\n          verificationStatus\n          info {\n            name\n          }\n          id\n        }\n        email\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Keep track of your customer’s onboarding process. Once onboarding is done, keep track of the account holder that was created."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account",
					"item": [
						{
							"name": "Get Account details",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuery {\n  accounts {\n    edges {\n      node {\n        balances {\n          reserved {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Make the most of your account details. This can be used to create a dashboard."
							},
							"response": []
						},
						{
							"name": "Add Virtual IBAN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($accountId: ID!) {\n  addVirtualIbanEntry(input: {accountId: $accountId}) {\n    ... on AddVirtualIbanEntrySuccessPayload {\n      __typename\n      virtualIbanEntry {\n        IBAN\n        status\n      }\n    }\n    ... on AccountNotFoundRejection {\n      id\n      message\n    }\n  }\n}\n",
										"variables": "{\n    \"accountId\": \"ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Add a new virtual IBAN to a given account. For this query, you'll need to add the account ID."
							},
							"response": []
						},
						{
							"name": "Get Transaction list and details",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuery {\n  accounts {\n    edges {\n      node {\n        name\n        number\n        IBAN\n        transactions {\n          edges {\n            node {\n              amount {\n                currency\n                value\n              }\n              bookedBalanceAfter {\n                currency\n                value\n              }\n              counterparty\n              createdAt\n              id\n              label\n              payment {\n                createdAt\n                id\n                statusInfo {\n                  status\n                  ... on PaymentConsentPending {\n                    __typename\n                    consent {\n                      createdAt\n                      startedAt\n                      status\n                      updatedAt\n                    }\n                    status\n                  }\n                  ... on PaymentInitiated {\n                    __typename\n                    status\n                  }\n                  ... on PaymentRejected {\n                    __typename\n                    reason\n                    status\n                  }\n                }\n                updatedAt\n              }\n              paymentId\n              paymentMethodIdentifier\n              paymentProduct\n              reference\n              side\n              statusInfo {\n                status\n                ... on BookedTransactionStatusInfo {\n                  __typename\n                  bookingDate\n                  status\n                  valueDate\n                }\n                ... on CanceledTransactionStatusInfo {\n                  canceledDate\n                  status\n                }\n                ... on PendingTransactionStatusInfo {\n                  pendingEndDate\n                  status\n                }\n                ... on RejectedTransactionStatusInfo {\n                  __typename\n                  reason\n                  status\n                }\n                ... on UpcomingTransactionStatusInfo {\n                  __typename\n                  executionDate\n                  status\n                }\n              }\n              type\n              updatedAt\n              ... on SEPACreditTransferTransaction {\n                id\n                amount {\n                  currency\n                  value\n                }\n                bookedBalanceAfter {\n                  currency\n                  value\n                }\n                counterparty\n                createdAt\n                creditor {\n                  name\n                  ... on SEPACreditTransferInCreditor {\n                    virtualIBANEntryId\n                    accountNumber\n                    maskedIBAN\n                    name\n                  }\n                  ... on SEPACreditTransferInternalOutCreditor {\n                    __typename\n                    accountNumber\n                    beneficiary {\n                      accountNumber\n                      id\n                      isMyOwnIban\n                      name\n                    }\n                    name\n                  }\n                  ... on SEPACreditTransferOutCreditor {\n                    __typename\n                    beneficiary {\n                      isMyOwnIban\n                      maskedIBAN\n                      name\n                    }\n                    maskedIBAN\n                    name\n                  }\n                }\n                debtor {\n                  name\n                  ... on SEPACreditTransferInDebtor {\n                    __typename\n                    maskedIBAN\n                    name\n                  }\n                  ... on SEPACreditTransferInternalInDebtor {\n                    __typename\n                    accountNumber\n                    name\n                  }\n                  ... on SEPACreditTransferOutDebtor {\n                    __typename\n                    maskedIBAN\n                    name\n                    accountNumber\n                  }\n                }\n                label\n                paymentId\n                paymentMethodIdentifier\n                paymentProduct\n                reference\n                side\n                statusInfo {\n                  status\n                }\n                type\n                updatedAt\n              }\n            }\n          }\n        }\n\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Keep track of all transactions whether Booked, Pending, or Rejected. A lot of this data can help you with reconciliation. In the case of incoming payments by virtual IBAN, you can retrieve the virtual IBAN ID."
							},
							"response": []
						}
					]
				},
				{
					"name": "CapitalDeposit",
					"item": [
						{
							"name": "Create capital deposit case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"counterIteration\", 0);\r",
											"\r",
											"var dataReponse = JSON.parse(responseBody);\r",
											"pm.environment.set(\"idCapitalDepositCase\", dataReponse.data.createCapitalDepositCase.capitalDepositCase.id);\r",
											"\r",
											"function removeUselessDocs(document){\r",
											"    if(document.type==\"KBIS\" || document.type==\"CapitalDepositCertificate\"|| document.type==\"STATUSES\"  || document.type==\"IdCard\"){\r",
											"        return false;\r",
											"    }\r",
											"    return true;\r",
											"}\r",
											"\r",
											"function removeShUselessDocs(document){\r",
											"     if(document.type==\"IdCard\"){\r",
											"        return false;\r",
											"    }\r",
											"    return true;\r",
											"}\r",
											"\r",
											"var unfilteredDocs = dataReponse.data.createCapitalDepositCase.capitalDepositCase.documents;\r",
											"\r",
											"var arrayFilesDepositCase = unfilteredDocs.filter(removeUselessDocs);\r",
											"\r",
											"for(var i=0; i<dataReponse.data.createCapitalDepositCase.capitalDepositCase.shareholders.length; i++){\r",
											"    const shareholderDocs = dataReponse.data.createCapitalDepositCase.capitalDepositCase.shareholders[i].documents;\r",
											"    const shDocs = shareholderDocs.filter(removeShUselessDocs);\r",
											"    arrayFilesDepositCase = arrayFilesDepositCase.concat(shDocs);\r",
											"} \r",
											"\r",
											"arrayFilesDepositCase.forEach((file, index) => {\r",
											"    pm.environment.set(\"idDocumentTest\" + index, file.id);\r",
											"    pm.environment.set(\"typeDocumentTest\" + index, file.type);\r",
											"    }\r",
											")\r",
											"\r",
											"pm.environment.set(\"numberOfDocuments\", arrayFilesDepositCase.length);\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: CreateCapitalDepositCaseInput!) {\n  createCapitalDepositCase(\n    input: $input\n  ) {\n    ... on CreateCapitalDepositCaseSuccessPayload {\n      capitalDepositCase {\n        companyName\n        id\n        companyOnboarding {\n          id\n        }\n        documents {\n          type\n          status\n          downloadUrl\n          id\n          uploadedAt\n        }\n        shareholders {\n          info {\n            ... on IndividualShareholder {\n              __typename\n              firstName\n              lastName\n            }\n            ... on CompanyShareholder {\n              __typename\n              name\n            }\n          }\n          status\n          id\n          onboarding{\n              id\n          }\n          documents {\n            type\n            status\n            downloadUrl\n            id\n            uploadedAt\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\r\n    \"input\": {\r\n      \"companyName\": \"Test company Benjamin\",\r\n      \"companyShareholders\": [],\r\n      \"individualShareholders\": [{\r\n        \"firstName\": \"Benjamin\",\r\n        \"lastName\": \"Grall\",\r\n        \"birthDate\": \"1996/12/20\",\r\n        \"nationality\": \"FRA\",\r\n        \"capitalDepositAmount\": { \"value\": \"10\", \"currency\": \"EUR\" },\r\n        \"onboardingInfo\": {\r\n            \"email\": \"benjamin.grall@swan.io\", \r\n             \"language\":\"fr\",\r\n            \"employmentStatus\": \"Employee\", \r\n            \"monthlyIncome\": \"Between1500And3000\", \r\n            \"residencyAddress\": {\r\n                \"addressLine1\": \"71 Rue du Faubourg Saint Martin\", \r\n                \"city\": \"Paris\", \r\n                \"country\": \"FRA\", \r\n                \"postalCode\": \"75010\"\r\n            }\r\n        }\r\n      }\r\n      ],\r\n      \"totalCapitalDepositAmount\": { \"value\": \"10\", \"currency\": \"EUR\" },\r\n      \"onboardingCapitalDepositCompany\": {\r\n        \"individualUltimateBeneficialOwners\": [{\r\n            \"type\": \"HasCapital\",\r\n            \"birthCity\": \"Colombes\",\r\n            \"birthCityPostalCode\": \"92025\",\r\n            \"birthCountryCode\": \"FRA\",\r\n            \"birthDate\": \"1996/12/20\",\r\n            \"direct\": true,\r\n            \"firstName\": \"Benjamin\",\r\n            \"lastName\": \"Grall\",\r\n            \"totalCapitalPercentage\": 100\r\n            }\r\n          ],\r\n          \"accountName\": \"Test company Benjamin\",\r\n          \"businessActivity\": \"BusinessAndRetail\",\r\n          \"businessActivityDescription\": \"It's a test company for a capital deposit test in live\",\r\n          \"companyType\": \"Company\",\r\n          \"email\": \"benjamin.grall@swan.io\",\r\n          \"isRegistered\": false,\r\n          \"language\":\"fr\",\r\n          \"monthlyPaymentVolume\": \"Between10000And50000\",\r\n          \"name\": \"Capital Deposit Account\",\r\n          \"residencyAddress\": {\r\n            \"addressLine1\": \"206 rue du faubourg saint martin\",\r\n            \"city\": \"Paris\",\r\n            \"country\": \"FRA\",\r\n            \"postalCode\": \"75010\"\r\n          }\r\n      }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						},
						{
							"name": "CreateUploadURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var dataReponse = JSON.parse(responseBody);\r",
											"pm.environment.set(\"uploadUrl\", dataReponse.data.generateCapitalDepositDocumentUploadUrl.uploadUrl);\r",
											"console.log(pm.environment.get(\"uploadUrl\"));\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var recupDocumentId = \"idDocumentTest\"+pm.environment.get(\"counterIteration\");\r",
											"var recupDocumentType = \"typeDocumentTest\"+pm.environment.get(\"counterIteration\");\r",
											"pm.environment.set(\"iterationDoc\", pm.environment.get(recupDocumentId));\r",
											"\r",
											"switch(pm.environment.get(recupDocumentType)){\r",
											"    case 'CompanyLegalAddressCertificate':\r",
											"        pm.environment.set(\"docURI\", '/Users/benjamingrall/Documents/Swan/Depot de capital/Documents démo/Certificat de domiciliation.pdf');\r",
											"        pm.environment.set(\"fileName\", \"Certificatdedomiciliation.pdf\");\r",
											"        console.log(pm.environment.get(\"docURI\"));\r",
											"        break;\r",
											"    case 'Statuses':\r",
											"        pm.environment.set(\"docURI\", '/Users/benjamingrall/Desktop/demo_ddk/Statuts.pdf');\r",
											"        pm.environment.set(\"fileName\", \"Statuts.pdf\");\r",
											"        break;\r",
											"    case 'CapitalDepositMandate':\r",
											"        pm.environment.set(\"docURI\", '/Users/benjamingrall/Desktop/demo_ddk/Mandat.pdf');\r",
											"        pm.environment.set(\"fileName\", \"Mandat.pdf\");\r",
											"        break;\r",
											"    case 'IndividualThreeMonthLegalAddressProof':\r",
											"        pm.environment.set(\"docURI\", \"/Users/benjamingrall/Desktop/demo_ddk/Corinne/justif_domicile.png\");\r",
											"        pm.environment.set(\"fileName\", \"justifdomicile.png\");\r",
											"        break;\r",
											"    case 'KBIS':\r",
											"        pm.environment.set(\"docURI\", \"/Users/benjamingrall/Desktop/demo_ddk/KBIS.pdf\");\r",
											"        pm.environment.set(\"fileName\", \"KBIS.pdf\");\r",
											"        break;\r",
											"    default:\r",
											"         pm.environment.set(\"docURI\", \"/Users/benjamingrall/Desktop/demo_ddk/Mandat de dépôt.pdf\");\r",
											"         pm.environment.set(\"fileName\", \"test.pdf\");\r",
											"         break;\r",
											"}\r",
											"\r",
											"console.log(pm.environment.get(\"fileName\"), pm.environment.get(\"iterationDoc\"),pm.environment.get(\"docURI\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: GenerateCapitalDepositDocumentUploadUrlInput!) {\n  generateCapitalDepositDocumentUploadUrl(\n      input: $input\n    ) {\n     ... on GenerateCapitalDepositDocumentUploadUrlSuccessPayload {\n      uploadUrl\n    }\n    ... on CapitalDepositDocumentCanNotBeUploaded {\n      id\n      message\n    }\n  }\n}",
										"variables": "{\r\n    \"input\" : {\r\n        \"documentId\": \"be6cf056-e8f0-4481-83bc-78f399095aa9\",\r\n        \"capitalDepositCaseId\": \"7d30e093-047c-48d3-8061-36278df62699\",\r\n        \"filename\": \"taxreturn.pdf\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						},
						{
							"name": "UseUploadURL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.environment.get(\"counterIteration\") < (pm.environment.get(\"numberOfDocuments\")-1)) {\r",
											"    postman.setNextRequest(\"CreateUploadURL\");\r",
											"    var iterationNumber = parseInt(pm.environment.get(\"counterIteration\")) + 1;\r",
											"    pm.environment.set(\"counterIteration\", iterationNumber);\r",
											"} else {\r",
											"    postman.setNextRequest(\"Query CapitalDepositCase\")\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Document",
											"type": "file",
											"src": "/Users/benjamingrall/Documents/Swan/Depot de capital/Documents démo/Mandat de dépôt.pdf"
										}
									]
								},
								"url": {
									"raw": "https://s3.eu-west-1.amazonaws.com/swan-capital-deposit-prod-sandbox/capital-deposit-case/7d30e093-047c-48d3-8061-36278df62699/ARTICLES_OF_INCORPORATION/be6cf056-e8f0-4481-83bc-78f399095aa9.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAT2CLYLGNUWQSHPUV%2F20220114%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20220114T101712Z&X-Amz-Expires=7200&X-Amz-Security-Token=FwoGZXIvYXdzEGsaDIDmRkIyJBgkq0E33yKoBKMXNnObiR8jQJuuOfYfWcrkj9dWmA2eQb8d2XnuYq%2FUipnK26Yxwi1cU2%2BbtccRVbJWc%2FooKfgPYQnCbS6OiPcUMapiIWHxyMvIAisJrGfqaqI7NolMWdHiy5Vuh5dGXr8Ve85PZ%2FZR1yCeZrRjjeq0XgKHGn4V2BPAjFpHLCei3YI6Fol5Ad%2BOhUiHSmKFlZMRkulGUs0ljVsDtmH6K%2BjdBZCjp%2FQXxChwvCbe9fjsn%2BZVZx0yN5JQWC1SwRn6uV0q5i01DXSIERCGaynL1Wc2xD4bliEyuOqxZ13mEh1SD9nk73TDrtRCjdWzqB4AUK3pNQHNo3%2BKMt1nWT9BsdQ1W4lwDsa2%2B4hznOynCXVcEUdvoBC4HWnK6cgVFvX1jIIWHzgKKG5xifv2nmmnXxPdogfwIqX0q73Jchg2mak%2FBoJgo%2BxWETisV6T4h0Rt0sBQlKKO0Zvu6%2FCbSesTkN2862WN876kYt9TDOlgRmZ8d5RMFzZ4z5iFOWGhiT9BhNAzmHL7vHmrx%2BvlJ6Le84c6jxCahLz2tSOnJ0e%2F942ye2VOImaiANVP71GtoYGDSPVvzgPEiGzsM0GMib42ai86istPe49r8mlvLMbKCl97GF%2BJ0wBPpTIWIzWE9Xg5utjtesus6s%2B6NqPK7lrqnSuccAsnYsf9%2BLfvju1DxmOxhm%2FBDWM4jiiuHZwD42Rokl3YyuG6yoCAXR6gN25%2BS%2BorW6wqqKOeHCi8k4WPBjIrs31fT%2FvHH4UG%2FEvfi7bAYCsjRpRtJYszSRcJFC%2Fy8sTs3Zdp7If6rKLMLg%3D%3D&X-Amz-Signature=62f4484b990613138abefebb1ac6ed07e1f2f43df9b4284b9c03634166b1c6ef&X-Amz-SignedHeaders=host",
									"protocol": "https",
									"host": [
										"s3",
										"eu-west-1",
										"amazonaws",
										"com"
									],
									"path": [
										"swan-capital-deposit-prod-sandbox",
										"capital-deposit-case",
										"7d30e093-047c-48d3-8061-36278df62699",
										"ARTICLES_OF_INCORPORATION",
										"be6cf056-e8f0-4481-83bc-78f399095aa9.pdf"
									],
									"query": [
										{
											"key": "X-Amz-Algorithm",
											"value": "AWS4-HMAC-SHA256"
										},
										{
											"key": "X-Amz-Credential",
											"value": "ASIAT2CLYLGNUWQSHPUV%2F20220114%2Feu-west-1%2Fs3%2Faws4_request"
										},
										{
											"key": "X-Amz-Date",
											"value": "20220114T101712Z"
										},
										{
											"key": "X-Amz-Expires",
											"value": "7200"
										},
										{
											"key": "X-Amz-Security-Token",
											"value": "FwoGZXIvYXdzEGsaDIDmRkIyJBgkq0E33yKoBKMXNnObiR8jQJuuOfYfWcrkj9dWmA2eQb8d2XnuYq%2FUipnK26Yxwi1cU2%2BbtccRVbJWc%2FooKfgPYQnCbS6OiPcUMapiIWHxyMvIAisJrGfqaqI7NolMWdHiy5Vuh5dGXr8Ve85PZ%2FZR1yCeZrRjjeq0XgKHGn4V2BPAjFpHLCei3YI6Fol5Ad%2BOhUiHSmKFlZMRkulGUs0ljVsDtmH6K%2BjdBZCjp%2FQXxChwvCbe9fjsn%2BZVZx0yN5JQWC1SwRn6uV0q5i01DXSIERCGaynL1Wc2xD4bliEyuOqxZ13mEh1SD9nk73TDrtRCjdWzqB4AUK3pNQHNo3%2BKMt1nWT9BsdQ1W4lwDsa2%2B4hznOynCXVcEUdvoBC4HWnK6cgVFvX1jIIWHzgKKG5xifv2nmmnXxPdogfwIqX0q73Jchg2mak%2FBoJgo%2BxWETisV6T4h0Rt0sBQlKKO0Zvu6%2FCbSesTkN2862WN876kYt9TDOlgRmZ8d5RMFzZ4z5iFOWGhiT9BhNAzmHL7vHmrx%2BvlJ6Le84c6jxCahLz2tSOnJ0e%2F942ye2VOImaiANVP71GtoYGDSPVvzgPEiGzsM0GMib42ai86istPe49r8mlvLMbKCl97GF%2BJ0wBPpTIWIzWE9Xg5utjtesus6s%2B6NqPK7lrqnSuccAsnYsf9%2BLfvju1DxmOxhm%2FBDWM4jiiuHZwD42Rokl3YyuG6yoCAXR6gN25%2BS%2BorW6wqqKOeHCi8k4WPBjIrs31fT%2FvHH4UG%2FEvfi7bAYCsjRpRtJYszSRcJFC%2Fy8sTs3Zdp7If6rKLMLg%3D%3D"
										},
										{
											"key": "X-Amz-Signature",
											"value": "62f4484b990613138abefebb1ac6ed07e1f2f43df9b4284b9c03634166b1c6ef"
										},
										{
											"key": "X-Amz-SignedHeaders",
											"value": "host"
										}
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						},
						{
							"name": "Query Onboarding",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuery($id: ID!) {\n  onboarding(id: $id) {\n    accountHolder {\n      id\n      accounts {\n        edges {\n          node {\n            BIC\n            IBAN\n            id\n            statusInfo {\n              status\n            }\n            balances {\n              booked {\n                currency\n                value\n              }\n            }\n          }\n        }\n      }\n      verificationStatus\n    }\n  }\n}\n",
										"variables": "{ \n    \"id\": \"TO_FILL_WITH_ONBOARDING_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for a company and pre-load the form with the company’s data. We highly recommend filling in all fields, especially Ultimate Beneficial Owners. The example below shows a company with one direct physical owner, and one indirect physical person through a direct company."
							},
							"response": []
						},
						{
							"name": "Query CapitalDepositCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuey($id: ID!) {\n  capitalDepositCase(id: $id) {\n    companyName\n    id\n    status\n    totalCapitalDepositAmount {\n      value\n      currency\n    }\n    companyAccountId\n    companyOnboarding {\n      id\n    }\n    documents {\n      type\n      status\n      id\n      downloadUrl\n      uploadedAt\n    }\n    shareholders {\n      info {\n        ... on IndividualShareholder {\n          firstName\n          lastName\n          birthDate\n          __typename\n        }\n        ... on CompanyShareholder {\n          name\n          __typename\n        }\n      }\n      status\n      capitalDepositAmount {\n        currency\n        value\n      }\n      id\n      accountId\n      onboarding {\n        id\n      }\n      documents {\n        type\n        status\n        downloadUrl\n        id\n        uploadedAt\n      }\n    }\n  }\n}\n",
										"variables": "{ \n    \"id\": \"TO_FILL_WITH_CAPITALDEPOSITCASE_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for an individual person and pre-load the form with their personal data.\nIf you have the info, try to fill in as many fields as possible. This streamlines the onboarding process."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.unset(\"counterIteration\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure payment control",
					"item": [
						{
							"name": "Get Payment Control",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query get {\n  getCardPartnerControl {\n    endpoint\n    protocol\n    defaultResponse\n    timeoutMs\n    secret\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "https://api.swan.io/live-exposed-internal/graphql",
									"protocol": "https",
									"host": [
										"api",
										"swan",
										"io"
									],
									"path": [
										"live-exposed-internal",
										"graphql"
									]
								},
								"description": "Display configuration for payment control. It can be used to create an administration panel."
							},
							"response": []
						},
						{
							"name": "Delete Payment control",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation {\n  deleteCardPartnerControl()\n  {\n      ...on DeleteCardPartnerControlPayload{\n          __typename,\n          error\n      }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "https://api.swan.io/live-exposed-internal/graphql",
									"protocol": "https",
									"host": [
										"api",
										"swan",
										"io"
									],
									"path": [
										"live-exposed-internal",
										"graphql"
									]
								},
								"description": "Delete configuration for payment control."
							},
							"response": []
						},
						{
							"name": "Update Payment control",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: UpdateCardPartnerControlInput!){\n  updateCardPartnerControl(input:$input)\n  {\n      ...on UpdateCardPartnerControlPayload{\n          __typename,\n          error\n      }\n  }\n}",
										"variables": "{\n    \"input\":{\n        \"endpoint\":\"TO_FILL_WITH_ENDPOINT\",\"protocol\":\"HttpJson\",\"defaultResponse\":true,\"timeoutMs\":1500,\"secret\":\"SECRET_TO_REPLACE\"\n        }\n}"
									}
								},
								"url": {
									"raw": "https://api.swan.io/live-exposed-internal/graphql",
									"protocol": "https",
									"host": [
										"api",
										"swan",
										"io"
									],
									"path": [
										"live-exposed-internal",
										"graphql"
									]
								},
								"description": "Update configuration for payment control. This allows Swan to include you in the authorization process of each card payment.\nIn this example we set the timeout to 1000 ms, and after that Swan will answer true to the authorization request."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Funding",
					"item": [
						{
							"name": "Get Funding Source",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuery($id: ID!) {\n  fundingSource(id: $id) {\n    id\n    name\n    statusInfo {\n      status\n    }\n    updatedAt\n    ... on DirectDebitFundingSource {\n      id\n      name\n      paymentMandate {\n        ... on SEPAPaymentDirectDebitMandate {\n          id\n          statusInfo {\n            status\n            ... on PaymentMandateConsentPendingStatusInfo {\n              __typename\n              consent {\n                consentUrl\n              }\n            }\n          }\n          mandateDocumentUrl\n        }\n      }\n      accountVerification {\n        statusInfo {\n          status\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{ \n    \"id\": \"TO_FILL_WITH_FUNDING_SOURCE_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Keep track of your customer’s onboarding process. Once onboarding is done, keep track of the account holder that was created."
							},
							"response": []
						}
					]
				}
			],
			"description": "The project access token is used when you act on your own behalf rather than on behalf of a user. To get a project access token, you have to use the OAuth2 flow (also called grant type): Client Credentials. Here are a few queries/mutations that may be useful as you get started with your integration. For more details, check out our documentation at https://docs.swan.io/\",",
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "accessToken",
						"value": "HQxwMPhCt0xLBO6llltzg0YoPqkaPAyB3uI9frpV8WU.NS4rPl79_fmdt16APimjEjkxG5EIUxVoAKrHscycDeg",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{TOKEN_ENDPOINT}}",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "body",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "openid offline",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{CLIENT_SECRET}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{CLIENT_ID}}",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "client_credentials",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "MyProjectToken",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Token",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "User refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "client_id",
											"value": "{{CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "O8PexqAjlaniftTSjya_4vFRdvYez2M_HOqvEOYRL60.N1ytRKLYWJK9-0QlvTnJ8HNDTNvlqIZ3t-niWBumB0U",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{TOKEN_ENDPOINT}}",
									"host": [
										"{{TOKEN_ENDPOINT}}"
									]
								},
								"description": "First, get a new access token using one of the above queries. Then, copy the refresh token and paste it in the body section of the User refresh token."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account",
					"item": [
						{
							"name": "Get user info + account info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query accounts {\n  user {\n    firstName\n    lastName\n    mobilePhoneNumber\n    authenticators {\n      brand\n      model\n      os\n      type\n    }\n  }\n  accountMemberships {\n    edges {\n      node {\n        account {\n          id\n          number\n          IBAN\n          balances {\n            available {\n              currency\n              value\n            }\n          }\n        }\n        canInitiatePayments\n        canManageAccountMembership\n        canManageBeneficiaries\n        canViewAccount\n        createdAt\n        email\n        id\n        legalRepresentative\n        statusInfo {\n          status\n          ... on AccountMembershipBindingUserErrorStatusInfo {\n            __typename\n            lastNameMatchError\n            idVerifiedMatchError\n            firstNameMatchError\n            birthDateMatchError\n            status\n            restrictedToAlias1: restrictedTo {\n              birthDate\n              firstName\n              lastName\n            }\n          }\n          ... on AccountMembershipConsentPendingStatusInfo {\n            __typename\n            status\n            consent {\n              consentUrl\n            }\n          }\n          ... on AccountMembershipInvitationSentStatusInfo {\n            __typename\n            status\n            restrictedToAlias2: restrictedTo {\n              birthDate\n              firstName\n              lastName\n            }\n          }\n          ... on AccountMembershipEnabledStatusInfo {\n            __typename\n            status\n          }\n          ... on AccountMembershipDisabledStatusInfo {\n            __typename\n            status\n            reason\n          }\n          ... on AccountMembershipSuspendedStatusInfo {\n            __typename\n            reason\n            status\n          }\n        }\n        updatedAt\n        user {\n          firstName\n          lastName\n          mobilePhoneNumber\n        }\n      }\n    }\n  }\n  accountHolders {\n    edges {\n      node {\n        accounts {\n          edges {\n            node {\n              IBAN\n              BIC\n              virtualIbanEntries {\n                edges {\n                  node {\n                    IBAN\n                    BIC\n                  }\n                }\n              }\n              balances {\n                available {\n                  currency\n                  value\n                }\n              }\n            }\n          }\n        }\n        info {\n          name\n          type\n          ... on AccountHolderCompanyInfo {\n            registrationNumber\n            companyType\n            businessActivity\n            businessActivityDescription\n            monthlyPaymentVolume\n            name\n            type\n            ultimateBeneficialOwners {\n              id\n              parentCompanyShareRatio\n              type\n              ... on UltimateBeneficialDirectOwnerCompanyInfo {\n                id\n                name\n                parentCompanyShareRatio\n                registrationNumber\n                type\n              }\n              ... on UltimateBeneficialDirectOwnerIndividualInfo {\n                id\n                birthDate\n                firstName\n                lastName\n                type\n                parentCompanyShareRatio\n              }\n              ... on UltimateBeneficialIndirectOwnerCompanyInfo {\n                id\n                name\n                parentCompanyReference\n                parentCompanyShareRatio\n                registrationNumber\n                type\n              }\n              ... on UltimateBeneficialIndirectOwnerIndividualInfo {\n                id\n                birthDate\n                firstName\n                lastName\n                parentCompanyReference\n                parentCompanyShareRatio\n                type\n              }\n            }\n          }\n          ... on AccountHolderIndividualInfo {\n            __typename\n            employmentStatus\n            monthlyIncome\n            name\n            type\n            user {\n              firstName\n              lastName\n              mobilePhoneNumber\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Display user and account information, including account membership. If you want to provide a dashboard to your clients you should use this query."
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Initiate Credit Transfer",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation initiateCreditTransfers($input: InitiateCreditTransfersInput!) {\n  initiateCreditTransfers(input: $input) {\n    __typename\n    ... on InitiateCreditTransfersSuccessPayload {\n      __typename\n      payment {\n        id\n        statusInfo {\n          ... on PaymentConsentPending {\n            __typename\n            status\n            consent {\n              id\n              consentUrl\n              redirectUrl\n            }\n          }\n          ... on PaymentInitiated {\n            __typename\n            status\n          }\n          ... on PaymentRejected {\n            __typename\n            reason\n            status\n          }\n        }\n      }\n    }\n    ... on AccountNotFoundRejection {\n      __typename\n      message\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"accountNumber\": \"10415018916\",\n    \"consentRedirectUrl\": \"https://swan.io?test=lol\",\n    \"creditTransfers\":\n      {\n        \"sepaBeneficiary\": {\n          \"iban\": \"FR8510096000508296769926Z32\",\n          \"name\": \"Michel Dupont\",\n          \"isMyOwnIban\": false,\n          \"save\": false\n        },\n        \"amount\": {\n          \"currency\": \"EUR\",\n          \"value\": 1500\n        },\n        \"reference\": \"contract1234\",\n        \"label\": \"rent ZZ\"\n      }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Initiate one SEPA credit transfer. This generates a consentURL which redirects the user to approve the operation through Swan app.\nDon't forget to replace the ACCOUNT_NUMBER variable."
							},
							"response": []
						},
						{
							"name": "Initiate multiple Credit Transfers",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation initiateCreditTransfers($input: InitiateCreditTransfersInput!) {\n  initiateCreditTransfers(input: $input) {\n    __typename\n    ... on InitiateCreditTransfersSuccessPayload {\n      __typename\n      payment {\n        id\n        statusInfo {\n          ... on PaymentConsentPending {\n            __typename\n            status\n            consent {\n              id\n              consentUrl\n              redirectUrl\n            }\n          }\n          ... on PaymentInitiated {\n            __typename\n            status\n          }\n          ... on PaymentRejected {\n            __typename\n            reason\n            status\n          }\n        }\n      }\n    }\n    ... on AccountNotFoundRejection {\n      __typename\n      message\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"accountNumber\": \"10108894849\",\n    \"consentRedirectUrl\": \"{{CALLBACK_URL}}\",\n    \"creditTransfers\":\n      [\n        {\n            \"sepaBeneficiary\": {\n            \"iban\": \"FR8510096000508296769926Z32\",\n            \"name\": \"Michel Dupont\",\n            \"isMyOwnIban\": false,\n            \"save\": false\n            },\n            \"amount\": {\n            \"currency\": \"EUR\",\n            \"value\": 1500\n            },\n            \"reference\": \"contract1234\",\n            \"label\": \"rent XX\"\n        },\n        {\n            \"sepaBeneficiary\": {\n            \"iban\": \"DE90500105171716813118\",\n            \"name\": \"Johannes Schmidt\",\n            \"isMyOwnIban\": false,\n            \"save\": false\n            },\n            \"amount\": {\n            \"currency\": \"EUR\",\n            \"value\": 2400\n            },\n            \"reference\": \"contract6451\",\n            \"label\": \"rent YY\"\n        }\n      ]\n  }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "You can make one consent request for multiple SEPA credit transfers - two in this example. This generates a consentURL which redirects the user to approve the operation through Swan app.\nDon't forget to replace the ACCOUNT_NUMBER variable."
							},
							"response": []
						}
					]
				},
				{
					"name": "Membership",
					"item": [
						{
							"name": "Add Account Membership",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddAccountMembership($input: AddAccountMembershipInput!) {\n  addAccountMembership(input: $input) {\n     ... on AddAccountMembershipSuccessPayload {\n      __typename\n      accountMembership {\n        canInitiatePayments\n        canManageAccountMembership\n        canManageBeneficiaries\n        canViewAccount\n        createdAt\n        email\n        id\n        legalRepresentative\n        statusInfo {\n          ... on AccountMembershipBindingUserErrorStatusInfo {\n            __typename\n            birthDateMatchError\n            firstNameMatchError\n            idVerifiedMatchError\n            lastNameMatchError\n            status\n          }\n          ... on AccountMembershipConsentPendingStatusInfo {\n            __typename\n            consent {\n              consentUrl\n              createdAt\n              expiredAt\n              id\n              purpose\n              redirectUrl\n              requireSCA\n              status\n              startedAt\n              updatedAt\n            }\n            status\n          }\n          ... on AccountMembershipDisabledStatusInfo {\n            __typename\n            reason\n            status\n          }\n          ... on AccountMembershipEnabledStatusInfo {\n            __typename\n            status\n          }\n          ... on AccountMembershipInvitationSentStatusInfo {\n            __typename\n            status\n            restrictedTo {\n              birthDate\n              phoneNumber\n              lastName\n              firstName\n            }\n          }\n          ... on AccountMembershipSuspendedStatusInfo {\n            __typename\n            status\n            reason\n          }\n          status\n        }\n        updatedAt\n        version\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n      \"accountId\": \"03edd690-33f0-495f-85b8-4cfe1b9d82c9\", \"email\": \"pro@benjamingrall.com\", \n      \"restrictedTo\": {\n          \"birthDate\": \"2000-01-03\",\n          \"firstName\": \"Benjamin\", \n          \"lastName\": \"Grall\", \n          \"phoneNumber\": \"+33678458765\"\n          }, \n          \"canViewAccount\": true, \n          \"canManageBeneficiaries\": true, \"canInitiatePayments\": true, \"canManageAccountMembership\": true, \n          \"consentRedirectUrl\": \"https://swan.io\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Add an account membership to a user using your account ID and the user's information."
							},
							"response": []
						},
						{
							"name": "Bind Account Membership",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation ($input:BindAccountMembershipInput!) {\n  bindAccountMembership(input: $input) {\n    ... on BindAccountMembershipSuccessPayload {\n      __typename\n      accountMembership {\n        id\n        version\n        canInitiatePayments\n        canManageAccountMembership\n        canManageBeneficiaries\n        canViewAccount\n        createdAt\n        email\n        legalRepresentative\n        statusInfo {\n          status\n          ... on AccountMembershipBindingUserErrorStatusInfo {\n            __typename\n            birthDateMatchError\n            firstNameMatchError\n            idVerifiedMatchError\n            lastNameMatchError\n            restrictedToAlias1:restrictedTo {\n              birthDate\n              firstName\n              lastName\n              phoneNumber\n            }\n            status\n          }\n          ... on AccountMembershipConsentPendingStatusInfo {\n            __typename\n            status\n            consent {\n              consentUrl\n              createdAt\n              expiredAt\n              id\n              purpose\n              redirectUrl\n              requireSCA\n              startedAt\n              status\n              updatedAt\n            }\n          }\n          ... on AccountMembershipDisabledStatusInfo {\n            __typename\n            reason\n            status\n          }\n          ... on AccountMembershipEnabledStatusInfo {\n            __typename\n            status\n          }\n          ... on AccountMembershipInvitationSentStatusInfo {\n            __typename\n            status\n            restrictedToAlias2:restrictedTo {\n              birthDate\n              firstName\n              lastName\n              phoneNumber\n            }\n          }\n          ... on AccountMembershipSuspendedStatusInfo {\n            __typename\n            reason\n            status\n          }\n        }\n        updatedAt\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n      \"accountMembershipId\": \"224ac82a-e163-494c-9393-2037befc20d6\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Bind an invited user with the account membership. Don't forget to replace the TO_FILL_WITH_MEMBERSHIP_ID variable."
							},
							"response": []
						}
					]
				},
				{
					"name": "Card",
					"item": [
						{
							"name": "Add Card",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: AddCardInput!) {\n  addCard(input: $input) {\n    ... on AddCardSuccessPayload {\n      __typename\n      card {\n        statusInfo {\n          ... on CardConsentPendingStatusInfo {\n            __typename\n            consent {\n              consentUrl\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n      \"accountMembershipId\": \"TO_FILL_WITH_MEMBERSHIP_ID\", \n      \"withdrawal\": true, \n      \"international\": true,\n      \"nonMainCurrencyTransactions\": true, \n      \"eCommerce\": true, \n      \"consentRedirectUrl\": \"{{CALLBACK_URL}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Add a new card to a Membership. To initiate this mutation, you must have canManageAccountMembership rights."
							},
							"response": []
						},
						{
							"name": "Add Single Use Virtual Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: AddSingleUseVirtualCardInput!) {\n  addSingleUseVirtualCard(input: $input) {\n    ... on AddSingleUseVirtualCardSuccessForUserPayload {\n      __typename\n      card {\n        id\n        expiryDate\n        statusInfo {\n          status\n          ... on CardConsentPendingStatusInfo {\n            __typename\n            consent {\n              consentUrl\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n    \"input\": {\n        \"accountMembershipId\": \"TO_FILL_WITH_MEMBERSHIP_ID\",\n        \"spendingLimit\": {\n            \"period\": \"Monthly\",\n            \"amount\": {\n                \"value\": \"100\",\n                \"currency\": \"EUR\"\n            }\n        },\n      \"consentRedirectUrl\": \"{{CALLBACK_URL}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Add a new single use virtual card to a Membership. To initiate this mutation, you must have canManageAccountMembership rights."
							},
							"response": []
						},
						{
							"name": "Print Physical Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation($input: PrintPhysicalCardInput!) {\n  printPhysicalCard(input: $input) {\n    ... on PrintPhysicalCardSuccessPayload {\n      __typename\n      physicalCard {\n        expiryDate\n        identifier\n        statusInfo {\n          status\n        }\n      }\n    }\n    ... on BadRequestRejection {\n      __typename\n      message\n    }\n    ... on AlreadyValidPhysicalCardRejection {\n      __typename\n      message\n    }\n  }\n}\n",
										"variables": "{\n    \"input\": {\n        \"cardId\": \"TO_FILL_WITH_CARD_ID\",\n        \"address\": {\n            \"addressLine1\": \"1 Rue de la Paix\", \n            \"city\": \"Paris\", \n            \"country\": \"FRA\", \n            \"postalCode\": \"75002\"\n        },\n        \"choosePINCode\": false,\n        \"consentRedirectUrl\": \"{{CALLBACK_URL}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Print a physical card associated to the virtual card."
							},
							"response": []
						},
						{
							"name": "Get Card info",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query MyQuery {\n  cards {\n    edges {\n      node {\n        cardUrl\n        id\n        accountMembership {\n          user {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get a card's ID and use the URL to display a preview of the card (like in an iFrame)."
							},
							"response": []
						},
						{
							"name": "View Card Number",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ViewCardNumbers($input: ViewCardNumbersInput! ) {\n  viewCardNumbers(\n    input: $input\n  ) {\n    __typename\n    ... on ViewCardNumbersSuccessPayload {\n      consent {\n        id\n        consentUrl\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n      \"cardId\": \"TO_FILL_WITH_CARD_ID\", \n      \"consentRedirectUrl\": \"{{CALLBACK_URL}}\"\n      }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Get the consent URL to enable card number disclosure. The card number is displayed after the CardURL."
							},
							"response": []
						}
					]
				},
				{
					"name": "Onboarding",
					"item": [
						{
							"name": "FinalizeOnboarding",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation(\n  $input: FinalizeOnboardingInput!) {\n  finalizeOnboarding(input: $input) {\n    ... on FinalizeOnboardingSuccessPayload {\n      __typename\n      onboarding {\n        statusInfo {\n          status\n        }\n        onboardingUrl\n      }\n    }\n    ... on InternalErrorRejection {\n      __typename\n      message\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n    ... on OnboardingNotCompletedRejection {\n      __typename\n      message\n      onboardingId\n    }\n  }\n}\n",
										"variables": "{ \n    \"input\": {\n    \"onboardingId\": \"TO_FILL_WITH_ONBOARDING_ID\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for a company and pre-load the form with the company’s data. We highly recommend filling in all fields, especially Ultimate Beneficial Owners. The example below shows a company with one direct physical owner, and one indirect physical person through a direct company."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Funding",
					"item": [
						{
							"name": "Add DD funding source",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation(\n  $input: AddDirectDebitFundingSourceInput!) {\n  addDirectDebitFundingSource(input: $input) {\n    ... on AddDirectDebitFundingSourceSuccessPayload {\n      __typename\n      fundingSource {\n        id\n        ... on DirectDebitFundingSource {\n          id\n          name\n          paymentMandate {\n            ... on SEPAPaymentDirectDebitMandate {\n              id\n              statusInfo {\n                ... on PaymentMandateConsentPendingStatusInfo {\n                  __typename\n                  consent {\n                    consentUrl\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{ \n    \"input\": {\n\"scheme\": \"SepaDirectDebitCore\",\n      \"accountId\": \"TO_FILL_WITH_ACCOUNT_ID\",\n      \"iban\": \"TO_FILL_WITH_EXTERNAL_IBAN\",\n      \"consentRedirectUrl\": \"https://swan.io\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Generate an onboarding URL for a company and pre-load the form with the company’s data. We highly recommend filling in all fields, especially Ultimate Beneficial Owners. The example below shows a company with one direct physical owner, and one indirect physical person through a direct company."
							},
							"response": []
						},
						{
							"name": "Initiate Funding Request",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation MyMutation2(\n  $input: InitiateFundingRequestInput!\n) {\n  initiateFundingRequest(input: $input) {\n    ... on InitiateFundingRequestSuccessPayload {\n      __typename\n      payment {\n        statusInfo {\n          status\n          ... on PaymentConsentPending {\n            __typename\n            consent {\n              consentUrl\n            }\n          }\n        }\n      }\n    }\n    ... on ForbiddenRejection {\n      __typename\n      message\n    }\n    ... on FundingLimitExceededRejection {\n      __typename\n      message\n    }\n    ... on FundingSourceWrongStatusRejection {\n      __typename\n      message\n    }\n    ... on FundingSourceNotFoundRejection {\n      id\n      message\n    }\n  }\n}\n",
										"variables": "{ \n    \"input\": {\n      \"fundingSourceId\": \"TO_FILL_WITH_FUNDING_SOURCE_ID\",\n      \"amount\": { \"value\": \"987\", \"currency\": \"EUR\" },\n      \"consentRedirectUrl\": \"https://swan.io\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{ENV}}/graphql",
									"host": [
										"{{BASE_URL}}{{ENV}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "Keep track of your customer’s onboarding process. Once onboarding is done, keep track of the account holder that was created."
							},
							"response": []
						}
					]
				}
			],
			"description": "The User Access Token is used when you act on behalf of an individual user. To get a user access token, you have to use the OAuth2 flow (also called grant type): Authorization code. It's totally similar to how users log in to a web application using their Facebook or Google account. Here are a few queries/mutations that may be useful as you get started with your integration. For more details, check out our documentation at https://docs.swan.io/\n\n",
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "accessToken",
						"value": "17XaTNZetUAX9VguYE_JB_gOjSIWODhBuJXidYG2QBY.rce2O7RBJB0AGfLOl-E-gHD1RT2pxUseo2CLWO5dkEU",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "openid offline accountmembership:bind",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "redirect_uri",
						"value": "{{CALLBACK_URL}}",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "{{AUTH_ENDPOINT}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{TOKEN_ENDPOINT}}",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "body",
						"type": "string"
					},
					{
						"key": "state",
						"value": "123412341234",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "MyUserToken",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{CLIENT_SECRET}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{CLIENT_ID}}",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}